{"version":3,"sources":["API/API.ts","utils/Utils.ts","components/questionCard/QuestionCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchQuizQuestion","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","UserAnswer","questionNr","totalQuestions","score","className","answer","key","disabled","value","onClick","dangerouslySetInnerHTML","__html","App","difficultyLevel","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","gameOver","setGameOver","questionNumber","setQuestionNumber","console","log","startTrivia","newQuestions","length","style","width","marginTop","fontSize","onChange","e","currentTarget","margin","Number","undefined","correct","prev","answerObject","correctAnswer","nextQuestion","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eb0f08e6.chunk.js","sourcesContent":["import {shuffleArray} from \"../utils/Utils\";\r\nimport { Question } from \"../types/types\";\r\n\r\nexport const fetchQuizQuestion = async (amount: number, difficulty: string) => {\r\n    const endpoint = `https://opentdb.com/api.php/?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await( await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers,\r\n            question.correct_answer,\r\n        ]),\r\n\r\n    }))\r\n}","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\n\r\n","import * as React from \"react\";\r\nimport { Props} from \"../../types/types\";\r\nimport \"./QuestionCard.css\";\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    UserAnswer,\r\n    questionNr,\r\n    totalQuestions,\r\n    score,\r\n}) => (\r\n        <div className=\"container\">\r\n            <p className='score'>Score: {score}</p>\r\n            <p className=\"number\" >Question: {questionNr} / {totalQuestions}</p>\r\n            {/* <p dangerouslySetInnerHTML={{ __html: question}} /> */}\r\n            <p className=\"question\">{question}</p>\r\n            <div className=\"quiz_answer\">{answers.map(answer => (<div key={answer}>\r\n                <button className=\"answer\" disabled={UserAnswer ? true : false} value={answer} onClick={callback}>\r\n                <span dangerouslySetInnerHTML={{ __html: answer}}></span>\r\n                </button>\r\n            </div>))}</div>\r\n       </div>\r\n    );\r\n\r\nexport default QuestionCard;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { QuestionState, answerObject } from './types/types';\nimport { fetchQuizQuestion } from \"./API/API\";\nimport QuestionCard from './components/questionCard/QuestionCard';\nimport firebase from \"./firebase\";\n\nconst App: React.FC = () => {\n\n  // let questionNumber = 10;\n  let difficultyLevel = \"easy\";\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<answerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [questionNumber, setQuestionNumber] = useState(5);\n\n  console.log(questions);\n\n  \n  const diffcultyPicker = (diff: React.FormEvent<HTMLSelectElement>) => {\n    difficultyLevel = diff.currentTarget.value;\n    setGameOver(true);\n  }\n\n  const QuestionNumberPicker = (num: React.FormEvent<HTMLSelectElement>) => {\n    setQuestionNumber(Number(num.currentTarget.value));\n    setGameOver(true);\n    console.log(questionNumber)\n  }\n\n     const startTrivia = async () => {\n      setLoading(true);\n      setGameOver(false);\n  \n      const newQuestions = await fetchQuizQuestion(questionNumber, difficultyLevel)\n  \n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n  \n    }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev: number) => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers((prev: answerObject[]) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    \n    if (nextQuestion === questionNumber) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n \n  // const messaging = firebase.messaging();\n  // messaging.requestPermission().then(() => {\n  //   return messaging.getToken();\n  // }).then((token) => {\n  //   console.log(token);\n  // })\n\n  return (\n    <div className={`${gameOver ? \"main_container\" : null}`}>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === questionNumber ? (\n      <div>\n      <select style={{width: '50%', marginTop: '30px', fontSize: '20px'}} onChange={(e: React.FormEvent<HTMLSelectElement>) => diffcultyPicker(e)}>\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Hard</option>\n      </select>\n      <br/>\n      <select style={{width: '50%', margin: '20px 0', fontSize: '20px'}} onChange={(e: React.FormEvent<HTMLSelectElement>) => QuestionNumberPicker(e)}>\n        <option value=\"5\">5</option>\n        <option value=\"10\">10</option>\n        <option value=\"15\">15</option>\n        <option value=\"20\">20</option>\n      </select>\n      <br/>\n      <button className=\"btn\" onClick={startTrivia}>Start</button>\n\n      </div>\n      ) : null}\n\n      {loading ? <p>Loading Questions...</p> : null}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={questionNumber}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          UserAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n          score={score}\n        />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 ? (\n        <button className='btn' onClick={nextQuestion }>\n          Next Question\n        </button>\n      ) : null}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}